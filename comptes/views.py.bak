from django.shortcuts import render, redirect, get_object_or_404
from django.contrib.auth import login
from django.contrib.auth.decorators import login_required, user_passes_test
from django.views.decorators.csrf import csrf_protect
from django.http import HttpResponse, JsonResponse
from django.utils import timezone
from datetime import timedelta, datetime
from django.core.mail import send_mail
from django.conf import settings
from .forms import CustomUserCreationForm, ProfilForm
from .models import Utilisateur, Publication, BienImmobilier, Transaction, Maison, Appartement, Terrain, Commentaire, Visite, Paiement
from .forms import PublicationForm, CommentaireForm, TransactionForm, PaiementForm
from .forms import MaisonForm, AppartementForm, TerrainForm

@csrf_protect
def register(request):
    if request.method == 'POST':
        form = CustomUserCreationForm(request.POST)
        if form.is_valid():
            user = form.save()
            login(request, user)
            return redirect('comptes:redirect_user')
    else:
        form = CustomUserCreationForm()
    return render(request, 'comptes/register.html', {'form': form})

@login_required
def redirect_user(request):
    user = request.user
    if user.is_superuser:
        return redirect('/admin/')
    if user.profession == 'client':
        return redirect('comptes:client_home')
    elif user.profession == 'agent':
        return redirect('comptes:publications')
    elif user.profession == 'proprietaire':
        return redirect('comptes:proprietaire_dashboard')
    else:
        return redirect('comptes:login')

@login_required
@user_passes_test(lambda u: u.profession == 'client')
def client_dashboard(request):
    return HttpResponse("Bienvenue, client !")
def home(request):
    if request.user.is_authenticated:
        if request.user.profession == 'client':
            return redirect('comptes:client_home')
        elif request.user.profession == 'agent':
            return redirect('comptes:publications')
        elif request.user.profession == 'proprietaire':
            return redirect('comptes:proprietaire_dashboard')
    return redirect('comptes:login')

@login_required
@user_passes_test(lambda u: u.profession == 'proprietaire')
def paiement_form(request):
    if request.method == 'POST':
        form = PaiementForm(request.POST)
        if form.is_valid():
            paiement = form.save(commit=False)
            paiement.proprietaire = request.user
            paiement.save()
            return redirect('comptes:paiements')
    else:
        form = PaiementForm()
    return render(request, 'comptes/paiement_form.html', {'form': form})

@login_required
@user_passes_test(lambda u: u.profession == 'agent')
def dashboard_agence(request):
    # Récupérer les statistiques
    total_biens = BienImmobilier.objects.count()
    total_clients = Utilisateur.objects.filter(profession='client').count()
    total_transactions = Transaction.objects.count()
    total_visites = Visite.objects.count()

    # Récupérer les biens de l'agence
    biens = BienImmobilier.objects.all().order_by('-id')[:6]  # Les 6 derniers biens

    return render(request, 'comptes/dashboard_agence.html', {
        'total_biens': total_biens,
        'total_clients': total_clients,
        'total_transactions': total_transactions,
        'total_visites': total_visites,
        'biens': biens
    })

@login_required
@user_passes_test(lambda u: u.profession == 'client')
def client_home(request):
    # Récupérer les biens disponibles
    biens = BienImmobilier.objects.all().order_by('-id')[:6]  # Les 6 derniers biens
    
    # Récupérer les visites programmées du client
    visites = Visite.objects.filter(client=request.user)
    
    return render(request, 'comptes/client_home.html', {
        'biens': biens,
        'visites': visites
    })

@login_required
@user_passes_test(lambda u: u.profession == 'client')
def client_home(request):
    # Récupérer les biens disponibles
    biens = BienImmobilier.objects.all().order_by('-id')[:6]  # Les 6 derniers biens
    
    # Récupérer les visites programmées du client
    visites = Visite.objects.filter(client=request.user)
    
    return render(request, 'comptes/client_home.html', {
        'biens': biens,
        'visites': visites
    })

@login_required
@user_passes_test(lambda u: u.profession == 'client')
def detail_bien(request, pk):
    bien = get_object_or_404(BienImmobilier, pk=pk)
    
    # Récupérer les visites programmées pour ce bien par le client
    visite = Visite.objects.filter(bien=bien, client=request.user).first()
    
    return render(request, 'comptes/detail_bien.html', {
        'bien': bien,
        'visite': visite
    })

@login_required
@user_passes_test(lambda u: u.profession == 'client')
def programmer_visite(request, pk):
    bien = get_object_or_404(BienImmobilier, pk=pk)
    
    if request.method == 'POST':
        date_str = request.POST.get('date_visite')
        date_visite = datetime.strptime(date_str, '%Y-%m-%dT%H:%M')
        
        # Vérifier si le client a déjà une visite programmée pour ce bien
        if Visite.objects.filter(bien=bien, client=request.user).exists():
            return JsonResponse({'success': False, 'message': 'Vous avez déjà une visite programmée pour ce bien'})
        
        # Créer la nouvelle visite
        visite = Visite.objects.create(
            bien=bien,
            client=request.user,
            date_visite=date_visite,
            statut='planifiee'
        )
        
        return JsonResponse({'success': True, 'message': 'Visite programmée avec succès'})
    
    return JsonResponse({'success': False, 'message': 'Méthode non autorisée'})

@login_required
@user_passes_test(lambda u: u.profession == 'client')
def annuler_visite(request, pk):
    visite = get_object_or_404(Visite, pk=pk, client=request.user)
    visite.statut = 'annulee'
    visite.save()
    return redirect('comptes:client_home')

@login_required
@user_passes_test(lambda u: u.profession == 'client')
def contacter_proprietaire(request, pk):
    bien = get_object_or_404(BienImmobilier, pk=pk)
    proprietaire = bien.proprietaire
    
    if request.method == 'POST':
        message = request.POST.get('message')
        
        # Envoyer un email au propriétaire
        subject = f'Nouveau message concernant {bien.type_bien} - {bien.titre}'
        message_body = f"""Bonjour {proprietaire.username},

Vous avez reçu un nouveau message concernant votre bien {bien.type_bien} - {bien.titre}:

{message}

Cordialement,
L'équipe ImmoDash"""
        
        send_mail(
            subject,
            message_body,
            settings.DEFAULT_FROM_EMAIL,
            [proprietaire.email]
        )
        
        return JsonResponse({'success': True, 'message': 'Message envoyé avec succès'})
    
    return JsonResponse({'success': False, 'message': 'Méthode non autorisée'})

@login_required
@user_passes_test(lambda u: u.profession == 'client')
def profil_view(request):
    return render(request, 'comptes/profil.html')

@login_required
@user_passes_test(lambda u: u.profession == 'proprietaire')
def proprietaire_dashboard(request):
    # Récupérer les statistiques
    total_biens = BienImmobilier.objects.filter(proprietaire=request.user).count()
    biens = BienImmobilier.objects.filter(proprietaire=request.user)
    total_prix = sum(bien.prix for bien in biens)
    total_superficie = sum(bien.superficie for bien in biens)
    total_visites = Visite.objects.filter(bien__proprietaire=request.user).count()

    # Récupérer les biens du propriétaire
    biens = BienImmobilier.objects.filter(proprietaire=request.user).order_by('-id')

    return render(request, 'comptes/proprietaire_dashboard.html', {
        'total_biens': total_biens,
        'total_prix': total_prix,
        'total_superficie': total_superficie,
        'total_visites': total_visites,
        'biens': biens
    })

@login_required
@user_passes_test(lambda u: u.profession == 'proprietaire')
def visites(request):
    # Récupérer toutes les visites du propriétaire
    visites = Visite.objects.filter(bien__proprietaire=request.user).order_by('-date_visite')
    return render(request, 'comptes/visites.html', {'visites': visites})

@login_required
@user_passes_test(lambda u: u.profession == 'proprietaire')
def paiements(request):
    # Récupérer tous les paiements du propriétaire
    paiements = Paiement.objects.filter(bien__proprietaire=request.user).order_by('-date')
    return render(request, 'comptes/paiements.html', {'paiements': paiements})

@login_required
@user_passes_test(lambda u: u.profession == 'proprietaire')
def commentaires(request):
    # Récupérer tous les commentaires sur les biens du propriétaire
    commentaires = Commentaire.objects.filter(annonce__bien__proprietaire=request.user).order_by('-date_commentaire')
    return render(request, 'comptes/commentaires.html', {'commentaires': commentaires})

@login_required
@user_passes_test(lambda u: u.profession == 'proprietaire')
def mes_publications(request):
    # Récupérer les biens du propriétaire
    biens = BienImmobilier.objects.filter(proprietaire=request.user)
    
    # Récupérer les publications des biens du propriétaire
    publications = Publication.objects.filter(bien__proprietaire=request.user).order_by('-date_creation')
    
    # Calculer les statistiques pour chaque publication
    for publication in publications:
        publication.visites = Visite.objects.filter(bien=publication.bien).count()
        publication.commentaires = Commentaire.objects.filter(annonce__publication=publication).count()
    
    # Calculer les statistiques globales
    total_publications = publications.count()
    biens_publications = len([pub for pub in publications if pub.bien])
    total_visites = Visite.objects.filter(bien__proprietaire=request.user).count()
    total_commentaires = Commentaire.objects.filter(annonce__publication__proprietaire=request.user).count()
    
    return render(request, 'comptes/mes_publications.html', {
        'publications': publications,
        'total_publications': total_publications,
        'biens_publications': biens_publications,
        'total_visites': total_visites,
        'total_commentaires': total_commentaires
    })
    


@login_required
@user_passes_test(lambda u: u.profession == 'client')
def modifier_profil(request):
    if request.method == 'POST':
        form = ProfilForm(request.POST, instance=request.user)
        if form.is_valid():
            form.save()
            return redirect('comptes:profil_view')
    else:
        form = ProfilForm(instance=request.user)
    
    return render(request, 'comptes/modifier_profil.html', {'form': form})

from django.contrib.auth import authenticate, login
from django.utils import timezone

def login_view(request):
    error_message = None
    if request.method == 'POST':
        username = request.POST.get('username')
        password = request.POST.get('password')
        
        if not username or not password:
            error_message = "Veuillez remplir tous les champs."
        else:
            user = authenticate(request, username=username, password=password)
            if user is not None:
                login(request, user)
                # Redirection vers la page d'accueil après la connexion
                return redirect('comptes:dashboard_home')
            else:
                error_message = "Nom d'utilisateur ou mot de passe incorrect."
    
    return render(request, 'comptes/login.html', {'error_message': error_message})

@login_required
def logout_view(request):
    from django.contrib.auth import logout
    logout(request)
    return redirect('comptes:register')

@login_required
@user_passes_test(lambda u: u.profession == 'agent')
def agent_dashboard(request):
    # Récupérer les données de l'agence
    agence = request.user.agence
    
    # Récupérer les statistiques
    total_biens = BienImmobilier.objects.filter(proprietaire__agence=agence).count()
    total_clients = Utilisateur.objects.filter(profession='client').count()
    total_transactions = Transaction.objects.filter(bien__proprietaire__agence=agence).count()
    total_visites = Visite.objects.filter(bien__proprietaire__agence=agence).count()
    
    # Récupérer les dernières transactions
    transactions = Transaction.objects.filter(bien__proprietaire__agence=agence).order_by('-date_transaction')[:5]
    
    # Récupérer les prochaines visites
    visites = Visite.objects.filter(bien__proprietaire__agence=agence, date_visite__gte=timezone.now()).order_by('date_visite')[:5]
    
    context = {
        'agence': agence,
        'total_biens': total_biens,
        'total_clients': total_clients,
        'total_transactions': total_transactions,
        'total_visites': total_visites,
        'transactions': transactions,
        'visites': visites
    }
    
    return render(request, 'comptes/dashboard_agence.html', context)

@login_required
@user_passes_test(lambda u: u.profession == 'proprietaire')
def proprietaire_dashboard(request):
    # Récupérer les statistiques
    total_biens = BienImmobilier.objects.filter(proprietaire=request.user).count()
    biens = BienImmobilier.objects.filter(proprietaire=request.user)
    total_prix = sum(bien.prix for bien in biens)
    total_superficie = sum(bien.superficie for bien in biens)
    total_visites = Visite.objects.filter(bien__proprietaire=request.user).count()

    # Récupérer les biens du propriétaire
    biens = BienImmobilier.objects.filter(proprietaire=request.user).order_by('-id')

    return render(request, 'comptes/proprietaire_dashboard.html', {
        'total_biens': total_biens,
        'total_prix': total_prix,
        'total_superficie': total_superficie,
        'total_visites': total_visites,
        'biens': biens
    })

@login_required
@user_passes_test(lambda u: u.profession == 'agent')
def agent_index(request):
    user = request.user
    # Nombre de biens publiés par ce propriétaire/agent
    biens_count = BienImmobilier.objects.filter(proprietaire=user).count()
    # Nombre de visites à venir (exemple, adapte selon ton modèle)
    visites_count = Visite.objects.filter(bien__proprietaire=user).count() if 'Visite' in globals() else 0
    # Nombre de transactions conclues
    transactions_count = Transaction.objects.filter(bien__proprietaire=user).count()
    biens = BienImmobilier.objects.filter(proprietaire=user)
    return render(request, 'comptes/index.html', {
        'biens_count': biens_count,
        'visites_count': visites_count,
        'transactions_count': transactions_count,
        'bien_list': biens,
    })
@login_required
@user_passes_test(lambda u: u.profession == 'proprietaire')
def proprietaire_index(request):
    # Récupérer les biens du propriétaire avec leurs publications
    biens = BienImmobilier.objects.filter(proprietaire=request.user)
    
    # Calculer les statistiques
    total_biens = biens.count()
    total_prix = sum(bien.prix for bien in biens)
    total_superficie = sum(bien.superficie for bien in biens)
    
    context = {
        'biens': biens,
        'total_biens': total_biens,
        'total_prix': total_prix,
        'total_superficie': total_superficie
    }
    
    return render(request, 'comptes/proprietaire_dashboard.html', context)



@login_required
def dashboard_home(request):
    # Récupérer les statistiques
    total_biens = BienImmobilier.objects.filter(proprietaire=request.user).count()
    total_transactions = Transaction.objects.filter(bien__proprietaire=request.user).count()
    total_commentaires = Commentaire.objects.filter(annonce__bien__proprietaire=request.user).count()
    total_visites = Visite.objects.filter(bien__proprietaire=request.user).count()
    
    # Récupérer les activités récentes
    recent_activities = [
        {
            'type': 'Nouvelle Publication',
            'description': 'Vous avez créé une nouvelle publication',
            'date': timezone.now()
        },
        {
            'type': 'Transaction',
            'description': 'Une offre a été faite sur votre bien',
            'date': timezone.now() - timedelta(days=1)
        },
        {
            'type': 'Visite',
            'description': 'Un client a visité votre bien',
            'date': timezone.now() - timedelta(days=2)
        }
    ]
    
    context = {
        'total_biens': total_biens,
        'total_transactions': total_transactions,
        'total_commentaires': total_commentaires,
        'total_visites': total_visites,
        'recent_activities': recent_activities
    }
    
    return render(request, 'comptes/dashboard_home.html', context)

# Vue pour le profil
@login_required
def profil_view(request):
    user = request.user
    biens = None
    
    if user.profession == 'proprietaire':
        biens = BienImmobilier.objects.filter(proprietaire=user)
    elif user.profession == 'agent':
        biens = BienImmobilier.objects.filter(agency=user)
    
    context = {
        'user': user,
        'biens': biens
    }
    return render(request, 'comptes/profil.html', context)

# Vue About
def about(request):
    return render(request, 'comptes/about.html')

# Vue Blog
def blog(request):
    return render(request, 'comptes/blog.html')

# Vue Contact
@login_required
def contact(request):
    if request.method == 'POST':
        form = ContactForm(request.POST)
        if form.is_valid():
            form.save()
            messages.success(request, 'Votre message a été envoyé avec succès !')
            return redirect('comptes:contact')
    else:
        form = ContactForm()
    
    return render(request, 'comptes/contact.html', {'form': form})

# Vue de recherche
def search(request):
    type_bien = request.GET.get('type_bien', '')
    prix_min = request.GET.get('prix_min', '')
    prix_max = request.GET.get('prix_max', '')
    
    biens = BienImmobilier.objects.all()
    
    if type_bien:
        biens = biens.filter(type_bien=type_bien)
    
    if prix_min:
        biens = biens.filter(prix__gte=prix_min)
    
    if prix_max:
        biens = biens.filter(prix__lte=prix_max)
    
    context = {
        'biens': biens,
        'type_bien': type_bien,
        'prix_min': prix_min,
        'prix_max': prix_max
    }
    return render(request, 'comptes/search_results.html', context)

# Vue de détail du bien
def detail_bien(request, pk):
    bien = get_object_or_404(BienImmobilier, pk=pk)
    context = {
        'bien': bien
    }
    return render(request, 'comptes/detail_bien.html', context)

# Vues pour les types de biens
def listings(request):
    biens = BienImmobilier.objects.all()
    context = {
        'biens': biens,
        'titre': 'Tous les biens'
    }
    return render(request, 'comptes/listings.html', context)

def condos(request):
    biens = BienImmobilier.objects.filter(type_bien='Appartement')
    context = {
        'biens': biens,
        'titre': 'Condos'
    }
    return render(request, 'comptes/listings.html', context)

def houses(request):
    biens = BienImmobilier.objects.filter(type_bien='Maison')
    context = {
        'biens': biens,
        'titre': 'Maisons'
    }
    return render(request, 'comptes/listings.html', context)

def lands(request):
    biens = BienImmobilier.objects.filter(type_bien='Terrain')
    context = {
        'biens': biens,
        'titre': 'Terrains'
    }
    return render(request, 'comptes/listings.html', context)

@login_required
@user_passes_test(lambda u: u.profession == 'proprietaire')
def mes_publications(request):
    # Récupérer les biens du propriétaire
    biens = BienImmobilier.objects.filter(proprietaire=request.user)
    
    # Récupérer les publications des biens du propriétaire
    publications = Publication.objects.filter(bien__proprietaire=request.user).order_by('-date_creation')
    
    # Calculer les statistiques pour chaque publication
    for publication in publications:
        publication.visites = Visite.objects.filter(bien=publication.bien).count()
        publication.commentaires = Commentaire.objects.filter(annonce__publication=publication).count()
    
    # Calculer les statistiques globales
    total_publications = publications.count()
    biens_publications = len([pub for pub in publications if pub.bien])
    total_visites = Visite.objects.filter(bien__proprietaire=request.user).count()
    total_commentaires = Commentaire.objects.filter(annonce__publication__proprietaire=request.user).count()
    
    return render(request, 'comptes/mes_publications.html', {
        'publications': publications,
        'total_publications': total_publications,
        'biens_publications': biens_publications,
        'total_visites': total_visites,
        'total_commentaires': total_commentaires
    })

def commentaires_view(request):
    form = CommentaireForm()
    return render(request, 'comptes/commentaires.html', {'form': form})

"""def visites_view(request):
    form = VisiteForm()
    return render(request, 'comptes/visites.html', {'form': form})
"""
def transactions_view(request):
    form = TransactionForm()
    return render(request, 'comptes/transactions.html', {'form': form})

def paiements_view(request):
    if not request.user.is_authenticated or request.user.profession != 'proprietaire':
        return redirect('comptes:login')
    
    paiements = Paiement.objects.filter(bien__proprietaire=request.user).order_by('-date')
    total_paiements = paiements.count()
    total_recettes = paiements.aggregate(Sum('montant'))['montant__sum'] or 0
    
    return render(request, 'comptes/paiements.html', {
        'paiements': paiements,
        'total_paiements': total_paiements,
        'total_recettes': total_recettes
    })

def visites_view(request):
    if not request.user.is_authenticated or request.user.profession != 'proprietaire':
        return redirect('comptes:login')
    
    visites = Visite.objects.filter(bien__proprietaire=request.user).order_by('-date_visite')
    total_visites = visites.count()
    visites_en_attente = visites.filter(statut='en_attente').count()
    visites_confirmees = visites.filter(statut='confirme').count()
    
    return render(request, 'comptes/visites.html', {
        'visites': visites,
        'total_visites': total_visites,
        'visites_en_attente': visites_en_attente,
        'visites_confirmees': visites_confirmees
    })

def choix_type_publication(request):
    return render(request, 'comptes/choix_type_publication.html')

def choix_bien(request):
    type_action = request.GET.get('type')  # 'vente' ou 'location'
    return render(request, 'comptes/choix_bien.html', {'type_action': type_action})

def ajouter_publication(request):
    # Récupérer les paramètres de l'URL
    type_action = request.GET.get('type') or request.POST.get('type')
    bien = request.GET.get('bien') or request.POST.get('bien')
    
    # Vérifier que nous avons les paramètres nécessaires
    if not type_action or not bien:
        return render(request, 'comptes/ajouter_publication.html', {
            'error_message': "Type d'action et type de bien sont requis"
        })
    
    # Initialiser les formulaires
    maison_form = MaisonForm()
    appartement_form = AppartementForm()
    terrain_form = TerrainForm()
    
    if not request.user.is_authenticated:
        return redirect('login')
        
    if request.method == 'POST':
        # Récupérer les données du formulaire
        superficie = request.POST.get('superficie')
        description = request.POST.get('description')
        prix = request.POST.get('prix')
        image = request.FILES.get('image')
        
        # Vérifier que tous les champs requis sont présents
        if not all([superficie, description, prix, image]):
            return render(request, 'comptes/ajouter_publication.html', {
                'type_action': type_action,
                'bien': bien,
                'error_message': "Veuillez remplir tous les champs requis",
                'maison_form': maison_form,
                'appartement_form': appartement_form,
                'terrain_form': terrain_form
            })
            
        try:
            # Convertir les valeurs numériques
            superficie = float(superficie)
            prix = float(prix)
            
            if superficie <= 0:
                raise ValueError("La superficie doit être supérieure à 0")
            if prix <= 0:
                raise ValueError("Le prix doit être supérieur à 0")
            
            # Créer le bien de base avec les champs communs
            bien_base = BienImmobilier.objects.create(
                type_bien=bien,
                superficie=superficie,
                description=description,
                prix=prix,
                proprietaire=request.user,
                image=image
            )
            print(f"Bien créé avec ID: {bien_base.id}")
            print(f"POST data: {request.POST}")
            
            # Créer le type de bien spécifique
            if bien == 'maison':
                print("\nCréation de la maison...")
                maison_form = MaisonForm(request.POST)
                print(f"\nDonnées du formulaire maison: {maison_form.data}")
                print(f"\nErreurs initiales: {maison_form.errors}")
                
                if maison_form.is_valid():
                    maison = maison_form.save(commit=False)
                    maison.bien = bien_base
                    maison.save()
                    print("\nMaison créée avec succès")
                else:
                    print(f"\nErreurs du formulaire maison: {maison_form.errors}")
                    print(f"\nTypes des champs: {maison_form.fields.keys()}")
                    print(f"\nDonnées nettoyées: {maison_form.cleaned_data}")
                    return render(request, 'comptes/ajouter_publication.html', {
                        'type_action': type_action,
                        'bien': bien,
                        'error_message': "Erreur dans le formulaire de la maison",
                        'maison_form': maison_form,
                        'appartement_form': appartement_form,
                        'terrain_form': terrain_form
                    })
            elif bien == 'appartement':
                print("\nCréation de l'appartement...")
                appartement_form = AppartementForm(request.POST)
                print(f"\nDonnées du formulaire appartement: {appartement_form.data}")
                print(f"\nErreurs initiales: {appartement_form.errors}")
                
                if appartement_form.is_valid():
                    appartement = appartement_form.save(commit=False)
                    appartement.bien = bien_base
                    appartement.save()
                    print("\nAppartement créé avec succès")
                else:
                    print(f"\nErreurs du formulaire appartement: {appartement_form.errors}")
                    print(f"\nTypes des champs: {appartement_form.fields.keys()}")
                    print(f"\nDonnées nettoyées: {appartement_form.cleaned_data}")
                    return render(request, 'comptes/ajouter_publication.html', {
                        'type_action': type_action,
                        'bien': bien,
                        'error_message': "Erreur dans le formulaire de l'appartement",
                        'maison_form': maison_form,
                        'appartement_form': appartement_form,
                        'terrain_form': terrain_form
                    })
            elif bien == 'terrain':
                print("\nCréation du terrain...")
                terrain_form = TerrainForm(request.POST)
                print(f"\nDonnées du formulaire terrain: {terrain_form.data}")
                print(f"\nErreurs initiales: {terrain_form.errors}")
                
                if terrain_form.is_valid():
                    terrain = terrain_form.save(commit=False)
                    terrain.bien = bien_base
                    terrain.save()
                    print("\nTerrain créé avec succès")
                else:
                    print(f"\nErreurs du formulaire terrain: {terrain_form.errors}")
                    print(f"\nTypes des champs: {terrain_form.fields.keys()}")
                    print(f"\nDonnées nettoyées: {terrain_form.cleaned_data}")
                    return render(request, 'comptes/ajouter_publication.html', {
                        'type_action': type_action,
                        'bien': bien,
                        'error_message': "Erreur dans le formulaire du terrain",
                        'maison_form': maison_form,
                        'appartement_form': appartement_form,
                        'terrain_form': terrain_form
                    })
                
            # Créer la publication
            Publication.objects.create(
                bien=bien_base,
                titre=f"{type_action.capitalize()} {bien}",
                description=description,
                prix=prix
            )
            print("\nPublication créée avec succès")
            
            return redirect('comptes:mes_publications')
            
        except ValueError as e:
            print(f"Erreur de valeur: {str(e)}")
            return render(request, 'comptes/ajouter_publication.html', {
                'type_action': type_action,
                'bien': bien,
                'error_message': str(e),
                'maison_form': maison_form,
                'appartement_form': appartement_form,
                'terrain_form': terrain_form
            })
        except Exception as e:
            print(f"Erreur: {str(e)}")
            return render(request, 'comptes/ajouter_publication.html', {
                'type_action': type_action,
                'bien': bien,
                'error_message': f"Une erreur est survenue: {str(e)}",
                'maison_form': maison_form,
                'appartement_form': appartement_form,
                'terrain_form': terrain_form
            })
    
    # Afficher le formulaire
    return render(request, 'comptes/ajouter_publication.html', {
        'type_action': type_action,
        'bien': bien,
        'maison_form': maison_form,
        'appartement_form': appartement_form,
        'terrain_form': terrain_form
    })

@login_required
def modifier_publication(request, pk):
    if not request.user.is_authenticated:
        return redirect('login')
    
    # Récupérer la publication et le bien associé
    publication = get_object_or_404(Publication, pk=pk)
    bien = publication.bien
    
    # Vérifier que l'utilisateur est le propriétaire du bien
    if bien.proprietaire != request.user:
        return HttpResponse("Vous n'avez pas l'autorisation de modifier cette publication", status=403)
    
    # Initialiser les formulaires
    publication_form = PublicationForm(instance=publication)
    bien_form = None
    
    # Initialiser le formulaire spécifique selon le type de bien
    if bien.type_bien == 'Maison':
        bien_form = MaisonForm(instance=bien.maison)
    elif bien.type_bien == 'Appartement':
        bien_form = AppartementForm(instance=bien.appartement)
    elif bien.type_bien == 'Terrain':
        bien_form = TerrainForm(instance=bien.terrain)
    
    if request.method == 'POST':
        # Traiter le formulaire de base
        publication_form = PublicationForm(request.POST, instance=publication)
        
        # Mettre à jour le bien
        bien.superficie = request.POST.get('superficie', bien.superficie)
        bien.description = request.POST.get('description', bien.description)
        bien.prix = request.POST.get('prix', bien.prix)
        if 'image' in request.FILES:
            bien.image = request.FILES['image']
        bien.save()
        
        # Mettre à jour la publication
        publication_form.save()
        
        # Mettre à jour le formulaire spécifique
        if bien_form:
            bien_form = bien_form.__class__(request.POST, instance=getattr(bien, bien.type_bien.lower()))
            if bien_form.is_valid():
                bien_form.save()
        
        return redirect('comptes:mes_publications')
    
    return render(request, 'comptes/modifier_publication.html', {
        'publication_form': publication_form,
        'bien_form': bien_form,
        'bien': bien
    })

@login_required
def supprimer_publication(request, pk):
    if not request.user.is_authenticated:
        return redirect('login')
    publication = get_object_or_404(Publication, pk=pk)
    
    # Vérifier que l'utilisateur est le propriétaire du bien
    if publication.bien.proprietaire != request.user:
        return HttpResponse("Vous n'avez pas l'autorisation de supprimer cette publication", status=403)
    
    if request.method == 'POST':
        publication.delete()
        return redirect('mes_publications')
    return render(request, 'comptes/supprimer_publication.html', {'publication': publication})



@login_required
def publications_view(request):
    # Récupérer les biens du propriétaire
    biens = BienImmobilier.objects.filter(proprietaire=request.user)
    
    # Récupérer les publications des biens du propriétaire
    publications = Publication.objects.filter(bien__proprietaire=request.user).order_by('-date_creation')
    
    # Calculer les statistiques pour chaque publication
    for publication in publications:
        publication.visites = Visite.objects.filter(bien=publication.bien).count()
        publication.commentaires = Commentaire.objects.filter(annonce__publication=publication).count()
    
    # Calculer les statistiques globales
    total_publications = publications.count()
    biens_publications = len([pub for pub in publications if pub.bien])
    total_visites = Visite.objects.filter(bien__proprietaire=request.user).count()
    total_commentaires = Commentaire.objects.filter(annonce__publication__proprietaire=request.user).count()
    
    return render(request, 'comptes/mes_publications.html', {
        'publications': publications,
        'total_publications': total_publications,
        'biens_publications': biens_publications,
        'total_visites': total_visites,
        'total_commentaires': total_commentaires
    })
